#!/usr/bin/env bash

set -euo pipefail

## colours for easy reference
RED="\\033[1;31m"
# BLUE="\\033[1;34m"
YELLOW="\\033[1;33m"
GREY="\\033[1;37m"
NC="\\033[0m"

# message functions
msg_error() {
    echo -e "${RED}==> Error: $*${NC}" 1>&2
    exit 1
}
msg_warn() {
    echo -e "${YELLOW}==> Warning: $*${NC}" 1>&2
    exit 1
}
msg_info() {
    echo -e "${GREY}==> $*${NC}" 1>&2
    exit 1
}

read -r -d'\0' USAGE <<'EOF'
USAGE: 
    cx <program> <config> | [clear] - switch your programs config

SUBCOMMANDS

    Managing your shims - programs in your shims directory
    ------------------------------------------------------
    enable|disable                  - sets up and enables all your programs (in your shims directory) 
    enable [program]                - enable all or a single program only
    disable [program]               - disable all or a single program only
    list [enabled|disabled]         - lists your programs
    get <program>                   - show the current config for your program


    Manage cx configuration
    -----------------------
    setup                           - setup initial config and directories
    config                          - show your config settings
    config edit                     - edit your config settings (opens with $EDITOR / $VISUAL)
    config validate                 - edit your config settings (opens with $EDITOR / $VISUAL)

    --help for more information

\0
EOF

read -r -d'\0' MOREINFO <<'EOF'
EXPORTS

    .bashrc / .bash_profile
    -----------------------
    . <(cx --config)                - sources your $HOME/.config/cx/cxrc (important exports!)
    . <(cx --autocomplete)          - sets up bash autocomplete, put this in your bashrc / bash_profile

    program (aka shim script)
    -------------------------
    . <(cx --functions)             - brings in common cx functions for your shim scripts, you'll need
                                      this for cx_bin_wrap <program> [<args>]

                                      cx_source_config  - sources the current config
                                      cx_bin_wrap       - runs the real command with your config


\0
EOF

[ "$#" = 0 ] && { echo "$USAGE"; exit 0; }

# Ensure environment variables are set and common dir created
[[ -z "${CX_SHIMS_DIR:-}" || ! -d "${CX_SHIMS_DIR}" ]] && msg_error "CX_SHIMS_DIR ${GREY}($CX_SHIMS_DIR)${NC} not set or found"
[[ -z "${CX_BIN_DIR:-}" || ! -d "${CX_BIN_DIR}" ]] && msg_error "CX_BIN_DIR ${GREY}($CX_BIN_DIR)${NC} not set or found"
[[ -z "${CX_COMMON_DIR:-}" || ! -d "${CX_COMMON_DIR}" ]] && msg_warn "CX_COMMON_DIR ${GREY}($CX_COMMON_DIR)${NC} not set or found, defaulting to ${GREY}'${CX_SHIMS_DIR}/common'${NC}"
[[ -z "${CX_BIN_LINK:-}" ]] && msg_warn "CX_BIN_LINK ${GREY}($CX_BIN_LINK)${NC} not set or found, defaulting of ${GREY}'run'${NC}"
[[ -z "${CX_CONFIG_LINK:-}" ]] && msg_warn "CX_CONFIG_LINK ${GREY}($CX_CONFIG_LINK)${NC} not set or found, defaulting to ${GREY}'config'${NC}"
CX_BIN_LINK="${CX_BIN_LINK:-run}"
CX_CONFIG_LINK="${CX_CONFIG_LINK:-config}"
CX_COMMON_DIR="${CX_COMMON_DIR:-${CX_SHIMS_DIR}/common}"
if [[ -z "${CX_COMMON_DIR}" || ! -d "${CX_COMMON_DIR}" ]]; then
    mkdir -p "${CX_COMMON_DIR}" || msg_error "Failed to create default common directory - ${GREY}${CX_COMMON_DIR}${NC}"
fi

## cx functions - to be exported for user scripts
cx_get_config() {
    local RP DIR PROG
    RP=$(realpath "$(command -v "$0")")
    DIR=$(cd "$(dirname "$RP")" && pwd)
    echo "${DIR}/${CX_CONFIG_LINK}"
}

cx_source_config() {
    # shellcheck disable=SC1090
    source "$(cx_get_config)"
}

cx_validate_tools() {
    local TOOLS
    TOOLS=("$@")
    for t in "${TOOLS[@]}"; do
        command -V "$t" 1>/dev/null
    done
}

cx_msg_error() {
    echo "==> $*" 1>&2
    exit 1
}

cx_path_exclude() {
    local  TMPPATH
    TMPPATH="$(echo -e "${PATH//:/\\n}" | grep -v "$CX_BIN_DIR" | tr '\n' ':')"
    export PATH="$TMPPATH"
}

cx_bin_wrap() {
    local CMD
    CMD=("$@")
    cx_path_exclude
    if read -r -t 0; then
        cat - | "${CMD[@]}"
    else
        "${CMD[@]}"
    fi
}

# export all cx_* functions

export_functions() {
    local CX_FUNCTIONS
    CX_FUNCTIONS="\
        cx_bin_wrap\
        cx_path_exclude\
        cx_msg_error\
        cx_validate_tools\
        cx_source_config\
        cx_get_config"

    for f in $CX_FUNCTIONS; do
        declare -f "$f"
    done
    exit 0
}

## end of cx functions


## autocomplete setup (bash)

# shellcheck disable=SC2207,SC2010,SC2086
_cx_completion()
{
    local CX_BASE_CMDS CX_IGNORE_DIRS CX_IGNORE_FILES CX_IGNORE
    CX_SHIMS_DIR=${CX_SHIMS_DIR:-"${HOME}/shims"}
    CX_BIN_DIR=${CX_BIN_DIR:-"${HOME}/shims_bin"}
    CX_BASE_CMDS=("setup get enable disable list")
    CX_LIST_OPTIONS=("enabled disabled")
    CX_BIN_LINK="${CX_BIN_LINK:-run}"
    CX_CONFIG_LINK="${CX_CONFIG_LINK:-config}"
    CX_IGNORE_DIRS="bin|common"
    CX_IGNORE_FILES="cx|autocomplete.bash"
    CX_IGNORE="${CX_CONFIG_LINK}|${CX_BIN_LINK}|${CX_IGNORE_DIRS}|${CX_IGNORE_FILES}"

    local cur prev

    cur=${COMP_WORDS[COMP_CWORD]}
    prev=${COMP_WORDS[COMP_CWORD-1]}

    case ${COMP_CWORD} in
        1)
            COMPREPLY=($(compgen -W "${CX_BASE_CMDS[*]} $(cx list)" -- ${cur}))
            ;;
        2)
            if [[ $prev == "list" ]]; then COMPREPLY=($(compgen -W "${CX_LIST_OPTIONS[*]} $(cx list)" -- ${cur}))
            elif [[ $prev == "enable" ]]; then COMPREPLY=($(compgen -W "$(cx list disabled)" -- ${cur}))
            elif [[ $prev == "disable" ]]; then COMPREPLY=($(compgen -W "$(cx list enabled)" -- ${cur}))
            elif [[ "${CX_BASE_CMDS[*]}" =~ $prev ]]; then COMPREPLY=($(compgen -W "$(cx list)" -- ${cur}))
            else COMPREPLY=($(compgen -W "$(ls -1 "${CX_SHIMS_DIR}/${prev}" | grep -vE "($CX_IGNORE)")" -- ${cur}))
            fi
            ;;
        *)
            COMPREPLY=()
            ;;
    esac
}

# to be sourced in - . $(cx --autocomplete)
setup_autocomplete() {
    declare -f _cx_completion
    echo 'complete -F _cx_completion cx'
    exit 0
}

## end of autocomplete setup

bin_link() {
    local REAL_PATH LINK_PATH PROG ACTION
    PROG="$1"
    ACTION="${2}"
    REAL_PATH="${CX_SHIMS_DIR}/${PROG}/${CX_BIN_LINK}"
    LINK_PATH="${CX_BIN_DIR}/${PROG}"
    if [ -e "$REAL_PATH" ]; then
        # delete symlink regardless of action
        if [ -h "$LINK_PATH" ]; then 
            rm -f "$LINK_PATH"
        fi
        if [ "${ACTION}" = "create" ]; then
            ln -snf "$REAL_PATH" "$LINK_PATH"
        fi
    else
        msg_error "program $PROG not found"
    fi
}

all_shims() {
    local REAL_PATH LINK_PATH ACTION
    ACTION="${1:-}"
    # shellcheck disable=SC2010
    if [ "$ACTION" = "create" ]; then
        msg_info "enabling all programs"
    else
        msg_warn "disabling all programs"
    fi

    # shellcheck disable=SC2044,SC2086
    #for PROG in $(find ${CX_SHIMS_DIR}/* -maxdepth 1 -type d -exec basename {} \;); do
    for PROG in $(get_shims); do
        bin_link "$PROG" "${ACTION}"
    done
}

get_current_config() {
    local PROG LINK CONFIG REAL_FILE
    PROG="$1"
    LINK="${CX_SHIMS_DIR}/${PROG}/${CX_CONFIG_LINK}"
    if [ -e "$LINK" ]; then
        REAL_FILE="$(readlink "$LINK")"
        basename "$REAL_FILE"
    else
        echo "none"
    fi
}

get_shims() {
    local DIRS LINKS DIFF
    # All
    DIRS=("$(find "$CX_SHIMS_DIR"/* -maxdepth 1 -type d -exec basename {} \; | grep -v "$(basename "$CX_COMMON_DIR")" | sort)")
    # Enabled
    # errors if empty when using /*
    LINKS=("$(find "$CX_BIN_DIR" -maxdepth 1 -type l -exec basename {} \; | sort)")
    # Disabled = All - Enabled
    DIFF=("$(comm <(echo "${LINKS[@]}") <(echo "${DIRS[@]}") -3 | tr -d '[:blank:]')")

    case "${1:-}" in
        enabled) echo "${LINKS[@]}" ;;
        disabled) echo "${DIFF[@]}" | grep -vE '^$' ;;
        *) echo "${DIRS[@]}" ;;
    esac
}

get_configs() {
    local PROG CONFIGS
    PROG="$1"
    CONFIGS=("$(find "$CX_SHIMS_DIR/${PROG}" -maxdepth 1 -type f -exec basename {} \; | grep -vE "($CX_BIN_LINK|$CX_COMMON_DIR)")")
    echo "${CONFIGS[@]}"
}

post_cx() {
    [ ! -z "$TMUX" ] && tmux refresh-client
}

switch_config() {
    local PROG CONFIG
    PROG="${1:-}"
    CONFIG="${2:-}"

    [ ! -e "${CX_SHIMS_DIR}/${PROG}/${CX_BIN_LINK}" ] && msg_error "program $PROG does not exist - ${GREY}try one of: [ $(get_shims | tr '\n' ' ')]"
    [ -z "$CONFIG" ] && msg_error "please provide a config to switch to - ${GREY}try one of: [ $(get_configs "$PROG" | tr '\n' ' ')]"

    cd "${CX_SHIMS_DIR}/$PROG"

    if [ "$CONFIG" = "clear" ]; then
        rm -f config
        msg_warn "config for $PROG cleared"
        exit 0
    fi

    [ ! -e "$CONFIG" ] && msg_error "config: $CONFIG does not exist - ${GREY}try one of : [ $(get_configs "$PROG" | tr '\n' ' ')]"

    # delete current config and recreate symlink
    [ -e config ] && rm -f config
    ln -snf "$CONFIG" config
    msg_info "Config for $PROG set to: $CONFIG"
    post_cx
}

# setup
setup() {
    # TODO: process args for scriptable installation
    # local ARGS
    # ARGS=("$@")
    # if [ "${#ARGS}" -gt 1 ]; then
    #     echo "${ARGS[@]:1}"
    # fi
    # exit 0

    # if first arg is validate, just run checks



    # ask to copy script to /usr/local/bin/ and possibly overwrite, assuming we 
    # trigger this from a fresh repo clone!
    # if user answers yes, 
    # cp $0 /usr/local/bin/ || msg_error ...
    # chmod +x /usr/local/bin/cx || msg_error ...


    local CONFIG_DIR BIN_DIR SOURCE_CONFIG_ENABLE SOURCE_AUTOCOMPLETE_ENABLE
    CONFIG_DIR="${HOME}/.config/cx"
    BIN_DIR="${CONFIG_DIR}/bin"
    if [ ! -d "${CONFIG_DIR}" ]; then
        mkdir -p "${CONFIG_DIR}" || msg_error "Failed to setup cx config dir - $CONFIG_DIR"
    fi
    if [ ! -d "${BIN_DIR}" ]; then
        mkdir -p "${BIN_DIR}" || msg_error "Failed to setup cx config dir - $BIN_DIR"
    fi

    # ask the user if they want us to append source config and auto complete to their 
    # bashrc / profile

    # setup initial exports file
    read -r -d'\0' <<EOF
# TODO: add all env vars here!!!

EOF

    # ask and append if SOURCE_CONFIG_ENABLE=1

    # ask and append if SOURCE_AUTOCOMPLETE_ENABLE=1


}

# end of setup

# MAIN

case "${1:-}" in
    setup) 
        setup "$@"
        ;;
    validate)
        echo "TODO"
        exit 0
        ;;
    enable) 
        if [ ! -z "${2:-}" ]; then
            bin_link "$2" create; exit 0
        else
            all_shims create; exit 0
        fi
        ;;
    disable) 
        if [ ! -z "${2:-}" ]; then
            bin_link "$2" delete; exit 0
        else
            all_shims delete; exit 0
        fi
        ;;
    get) get_current_config "$2"; exit 0; ;;
    list) 
        if [[ "${2:-}" == "enabled" || "${2:-}" == "disabled" || "${2:-}" == "" ]]; then
            get_shims "${2:-}"; exit 0
        else
            get_configs "$2"; exit 0
        fi
        ;;
    -h) 
        echo "$USAGE"
        exit 0
        ;;
    --help)
        echo "$USAGE"; echo
        echo "$MOREINFO"
        exit 0
        ;;
    --autocomplete)
        setup_autocomplete
        ;;
    --functions)
        export_functions
        ;;
esac

switch_config "${1:-}" "${2:-}"
