#!/usr/bin/env bash
# shellcheck disable=SC1090

set -euo pipefail

## colours for easy reference
RED="\\033[1;31m"
BLUE="\\033[1;34m"
YELLOW="\\033[1;33m"
GREY="\\033[1;37m"
NC="\\033[0m"

# cx home
CONFIG_DIR="${HOME}/.config/cx"
CONFIG_FILE="${CONFIG_DIR}/cxrc"
BIN_DIR="${CONFIG_DIR}/bin"

# message functions
msg_error() {
    echo -e "${RED}==> Error: $*${NC}" 1>&2
    exit 1
}
msg_warn() {
    echo -e "${YELLOW}==> Warning: $*${NC}" 1>&2
}
msg_info() {
    echo -e "${GREY}==> $*${NC}" 1>&2
}
_msg_try_one() {
    local MTYPE PROG
    MTYPE="$1"
    PROG="${2:-}"
    RES=()
    case "${MTYPE}" in
        program) RES+=("$(get_shims)") ;;
        config) RES+=("$(get_configs "$PROG")") ;;
    esac
    echo -e "${GREY}try one of: ${BLUE}[ $(echo "${RES[*]}" | tr '\n' ' ')]"
}

# internal helpers
_cli2var() {
    echo "$1" | sed -e 's/--//g' | tr '[:lower:]' '[:upper]'
}

read -r -d'\0' USAGE <<'EOF'
USAGE: 
    cx <program> <config> | [clear] - switch your programs config

SUBCOMMANDS

    Managing your shims - programs in your shims directory
    ------------------------------------------------------
    enable|disable                  - sets up and enables all your programs (in your shims directory) 
    enable <program>                - enable single program only
    disable <program>               - disable single program only
    list [enabled|disabled]         - lists your programs
    get <program>                   - show the current config for your program

    Manage cx configuration
    -----------------------
    init                            - setup initial config and directories
    config                          - show your config settings
    config edit                     - edit your config settings (opens with $EDITOR / $VISUAL)
    config validate                 - edit your config settings (opens with $EDITOR / $VISUAL)


    First time cx use? initialise with:

        cx init

    For more information:

        cx --help

\0
EOF

read -r -d'\0' MOREINFO <<'EOF'
EXPORTS

    .bashrc / .bash_profile
    -----------------------
    . <(cx --config)                - sources your $HOME/.config/cx/cxrc (important exports!)
    . <(cx --autocomplete)          - sets up bash autocomplete, put this in your bashrc / bash_profile

    program (aka shim script)
    -------------------------
    . <(cx --init)                  - brings in common cx settings, functions and sources your config, 
                                      you'll need this to: cx_bin_wrap <program> [<args>]

    functions (after source <(cx --init))
    -------------------------------------
    cx_bin_wrap       - runs the real command with your config, takes care of handling piped input and args
    cx_validate_tools - given a space separated list of commands will verify they are available
    ...


\0
EOF

# setup
initialise_cx_home() {

    # create cx 'home' directory to house config file and bin dir
    if [ ! -d "${CONFIG_DIR}" ]; then
        mkdir -p "${CONFIG_DIR}" || msg_error "Failed to setup cx config dir - $CONFIG_DIR"
    fi
    if [ ! -d "${BIN_DIR}" ]; then
        mkdir -p "${BIN_DIR}" || msg_error "Failed to setup cx config dir - $BIN_DIR"
    fi

    read -r -d'\0' DEFAULT_CONFIG <<'EOF'
# cx settings file, these are your base settings!
# you can override these values by exporting them in your ~/.bashrc / ~/.bash_profile
# by prefixing the value with CX_, e.g. for SHIMS_DIR = CX_SHIMS_DIR


# contains symlinks to your shims, ensure this exists early on in your PATH
# check it's the last step in your ~/.bashrc / ~/bash_profile 
#'export PATH="${CX_BIN_DIR}:${PATH}"'
BIN_DIR="${HOME}/.config/cx/bin"

# Example File layout of your shims directory
# my-shims/                 <-- (SHIMS_DIR)
# ├─ common/               	<-- (COMMON_DIR)
# └─ mysql/					<-- command name, must match a command already in your PATH
#    ├── run                <-- (BIN_LINK) name of script, gets symlinked in BIN_DIR
#    ├── staging			<-- a real configuration containing settings to be sourced in your 'run' script
#    └── config -> staging  <-- (CONFIG_LINK) this is what gets sourced in when using '. $(cx --init)' in your script

# script file within your shims directory to symlink to in BIN_DIR
BIN_LINK=run

# symlink name to use when set context with 'cx <program> <config>'
CONFIG_LINK=config

# your shims directory and configs, (ideally version controlled on a private
# git repository, like keybase or gitlab)
SHIMS_DIR=/tmp/cx # you should change this or override in your ~/.bashrc

# common directory containing includes you can reuse in your shim scripts, by default
# we'll look for "common" within the shims directory but you can override this if you 
# want it in a different directory / repository
COMMON_DIR="/tmp/cx/common"

# refresh the tmux session (if we detect you're using tmux) after every program config change
TMUX_REFRESH=true
\0
EOF

    if [ ! -e "$CONFIG_FILE" ]; then 
        echo "$DEFAULT_CONFIG" > "$CONFIG_FILE" || msg_error "Failed to create default config file: $CONFIG_FILE"

        read -r -d'\0' SETUP_COMPLETE_MSG <<EOF

Created:
    - $CONFIG_DIR   (configuration directory)
    - $BIN_DIR      (bin directory to house symlinks)
    - $CONFIG_FILE  (configuration file, default settings)


    Last remaining steps:
    ---------------------

    1. add / override the values below in your ~/.bashrc
        export CX_SHIMS_DIR=...         # directory / repo for your shims
        export CX_BIN_DIR=...           # directory contains symlinks to your shims 'run' script
        export CX_COMMON_DIR=...        # optional, if you do not want "\${CX_SHIMS_DIR}/common"

    2. enable autocompletion (optional), add to ~/.bashrc:
        command -v cx &>/dev/null . <(cx --autocomplete)

    3. the last step / last PATH manipulation in your ~/.bashrc (so that $BIN_DIR is first)
        export PATH="${BIN_DIR}:\${PATH}"

    4. copy the cx binary to your PATH, e.g. /usr/local/bin (incase you're running cx from the cloned repo)
        cp cx /usr/local/bin/
        chmod +x /usr/local/bin/cx

    5. open a new terminal or re-source your ~/.bashrc or ~/.bash_profile
\\0
EOF

        msg_info "First run setup complete"
        echo -e "\\n${SETUP_COMPLETE_MSG}\\n\\n"
    else
        msg_info "Already initialised"
    fi

}

get_settings_from_file() {
    grep "^[[:alnum:]_-]* *=.*" "$CONFIG_FILE" \
    | sed 's/#.*//g' \
    | sed 's/ *= */=/g' \
    | awk -F= '{print $1,$2}'
}

initialise_settings() {

    if [ ! -e "$CONFIG_FILE" ]; then 
        initialise_cx_home
        exit 0
    fi

    # process variables
    # priority of setting global variables
    #   1. environment variable
    #   2. config file
    # In order to have a mix and allow higher priorities to override we set from
    # lowest priority first then the higher priorities
    # we'll set to some temporary variables and the final pass will export to real variables

    ALL_VARS=(
        CX_BIN_DIR
        CX_BIN_LINK
        CX_CONFIG_LINK
        CX_SHIMS_DIR
        CX_COMMON_DIR
        CX_TMUX_REFRESH
        )
    # cxrc var excludes 'CX_'


	# setup local version of vars for us to override
    local TMP_VAR_PREFIX=__
	local LOCAL_VARS=()
    for i in "${ALL_VARS[@]}"; do
        LOCAL_VARS+=("${TMP_VAR_PREFIX}${i}")
    done
	local "${LOCAL_VARS[@]}"

    # settings from config
    # we loop through all values in the config file, ignoring comments and stripping spaces
    # then using the name of the variable to set the local version (add CX_)
	set +u
	while read -r k v; do
		t="${TMP_VAR_PREFIX}CX_${k}"
		eval "$t"="$v"
    done<<<"$(get_settings_from_file)"

	# settings from environment variables
    # we just have to add our tmp prefix 
	for i in "${ALL_VARS[@]}"; do
		if [ ! -z "${!i:-}" ]; then
			t="${TMP_VAR_PREFIX}${i}"
			eval "$t"="${!i}"
		fi
	done

    # overriding environment variables with final results, only useful internally 
    # and when scripts request a value via cx get --<cli setting>
    for i in "${ALL_VARS[@]}"; do
        t="${TMP_VAR_PREFIX}${i}"
        eval "$i"="${!t}"
    done
	set -u

}
# end of initialise_settings

validate_settings() {
    # Ensure directories are valid
    [ -d "${CX_SHIMS_DIR}" ] || msg_error "shims directory ${GREY}($CX_SHIMS_DIR)${NC} not found"
    [ -d "${CX_BIN_DIR}" ] || msg_error "bin directory ${GREY}($CX_BIN_DIR)${NC} not found"

    # Display message if asked to validate explicitly - cx config validate
    if [ "$#" -gt 0 ]; then
        msg_info "Config looks good!"
    fi
}

get_settings_globally() {
	for l in "${ALL_VARS[@]}"; do
        echo "${l}: ${!l}" | sed 's/^CX_//g'
	done
    msg_warn "\\n\\tThese settings possibly include values overriden by environment variables and may\\n \\tdiffer from your config file - $CONFIG_FILE"
}

get_settings() {
    local ARG="$1"

    # validate | blank | edit
    case "${ARG}" in
        validate)
            validate_settings msg
            ;;
        edit)
            if [ ! -z "${EDITOR:-}" ]; then
                "$EDITOR" "$CONFIG_FILE" || msg_error "Failed to open $CONFIG_FILE with $EDITOR"
            fi
            ;;
        *)
            get_settings_globally || msg_error "Failed to get cx settings"
            ;;
    esac
}


# cx --exports  # so scripts can access CX_* settings
export_settings() {
    local LINE 
    local EXPORTED_SETTINGS=""
    for v in "${ALL_VARS[@]}"; do
        LINE="export $v=${!v}\\0"
        read -r -d '\0' EXPORTED_SETTINGS <<EOF
$EXPORTED_SETTINGS
$LINE\\0
EOF
    done
    echo "$EXPORTED_SETTINGS"
}


## cx functions - to be exported for user scripts
cx_get_config() {
    local RP DIR PROG
    RP=$(realpath "$(command -v "$0")")
    DIR=$(cd "$(dirname "$RP")" && pwd)
    echo "${DIR}/${CX_CONFIG_LINK}"
}

cx_source_config() {
    source "$(cx_get_config)"
}

cx_validate_tools() {
    local TOOLS
    TOOLS=("$@")
    for t in "${TOOLS[@]}"; do
        command -v "$t" 1>/dev/null
    done
}

cx_msg_error() {
    echo "==> $*" 1>&2
    exit 1
}

cx_path_exclude() {
    local  TMPPATH
    TMPPATH="$(echo -e "${PATH//:/\\n}" | grep -v "$CX_BIN_DIR" | tr '\n' ':')"
    export PATH="$TMPPATH"
}

# main trigger in shim script, should be the last step of the shim
# handle piped and normal invocations
# we exclude BIN_DIR from the path so we can call the real command!
cx_bin_wrap() {
    local CMD
    CMD=("$@")
    cx_path_exclude
    if read -r -t 0; then
        cat - | "${CMD[@]}"
    else
        "${CMD[@]}"
    fi
}

# end of cx_* functions

export_functions() {
    # export cx_ functions
    local CX_FUNCTIONS
    CX_FUNCTIONS="\
        cx_bin_wrap\
        cx_path_exclude\
        cx_msg_error\
        cx_msg_info\
        cx_msg_warn\
        cx_validate_tools\
        cx_source_config\
        cx_get_config"

    for f in $CX_FUNCTIONS; do
        declare -f "$f"
    done

    # trigger functions after import
    echo "cx_source_config"

    exit 0
}

## end of cx functions


## autocomplete setup (bash)

# shellcheck disable=SC2207,SC2010,SC2086
_cx_completion()
{
    local CX_BASE_CMDS CX_IGNORE_DIRS CX_IGNORE_FILES CX_IGNORE
    CX_SHIMS_DIR=${CX_SHIMS_DIR:-"${HOME}/shims"}
    CX_BIN_DIR=${CX_BIN_DIR:-"${HOME}/.config/cx/bin"}
    CX_BASE_CMDS=("get enable disable list init config")
	CX_CONFIG_OPTIONS=("edit validate")
    CX_LIST_OPTIONS=("enabled disabled")
    CX_BIN_LINK="${CX_BIN_LINK:-run}"
    CX_CONFIG_LINK="${CX_CONFIG_LINK:-config}"
    CX_IGNORE_DIRS="bin|common"
    CX_IGNORE_FILES="cx|autocomplete.bash"
    CX_IGNORE="${CX_CONFIG_LINK}|${CX_BIN_LINK}|${CX_IGNORE_DIRS}|${CX_IGNORE_FILES}"

    local cur prev

    cur=${COMP_WORDS[COMP_CWORD]}
    prev=${COMP_WORDS[COMP_CWORD-1]}

    case ${COMP_CWORD} in
        1)
            COMPREPLY=($(compgen -W "${CX_BASE_CMDS[*]} $(cx list)" -- ${cur}))
            ;;
        2)
            if [[ "${CX_BASE_CMDS[*]}" =~ $prev ]]; then COMPREPLY=($(compgen -W "$(cx list)" -- ${cur})); fi
			case "$prev" in
				list) COMPREPLY=($(compgen -W "${CX_LIST_OPTIONS[*]} $(cx list)" -- ${cur})) ;;
				enable) COMPREPLY=($(compgen -W "$(cx list disabled)" -- ${cur}));;
				disable) COMPREPLY=($(compgen -W "$(cx list enabled)" -- ${cur}));;
				config) COMPREPLY=($(compgen -W "${CX_CONFIG_OPTIONS[*]}" -- ${cur}));;
				*) COMPREPLY=($(compgen -W "$(ls -1 "${CX_SHIMS_DIR}/${prev}" | grep -vE "($CX_IGNORE)")" -- ${cur}));;

			esac
            ;;
        *)
            COMPREPLY=()
            ;;
    esac
}

# to be sourced in - . $(cx --autocomplete)
setup_autocomplete() {
    declare -f _cx_completion
    echo 'complete -F _cx_completion cx'
    exit 0
}

## end of autocomplete setup

bin_link() {
    local REAL_PATH LINK_PATH PROG ACTION
    PROG="$1"
    ACTION="${2}"
    REAL_PATH="${CX_SHIMS_DIR}/${PROG}/${CX_BIN_LINK}"
    LINK_PATH="${CX_BIN_DIR}/${PROG}"
    if [ -e "$REAL_PATH" ]; then
        # delete symlink regardless of action
        if [ -h "$LINK_PATH" ]; then 
            rm -f "$LINK_PATH"
        fi
        if [ "${ACTION}" = "create" ]; then
            ln -snf "$REAL_PATH" "$LINK_PATH"
        fi
    else
        msg_error "program $PROG not found"
    fi
}

all_shims() {
    local REAL_PATH LINK_PATH ACTION
    ACTION="${1:-}"
    # shellcheck disable=SC2010
    if [ "$ACTION" = "create" ]; then
        msg_info "enabling all programs"
    else
        msg_warn "disabling all programs"
    fi

    # shellcheck disable=SC2044,SC2086
    #for PROG in $(find ${CX_SHIMS_DIR}/* -maxdepth 1 -type d -exec basename {} \;); do
    for PROG in $(get_shims); do
        bin_link "$PROG" "${ACTION}"
    done
}


get_current_config() {
    # if starts -- then get internal config
    if [[ "$1" =~ "--" ]]; then
        t="$(_cli2var "$1")" 
        echo "${!t}"
        return
    fi

    # else normal program
    local PROG LINK CONFIG REAL_FILE
    PROG="$1"
    LINK="${CX_SHIMS_DIR}/${PROG}/${CX_CONFIG_LINK}"
    if [ -e "$LINK" ]; then
        REAL_FILE="$(readlink "$LINK")"
        basename "$REAL_FILE"
    else
        echo "none"
    fi
}

get_shims() {
    local DIRS LINKS DIFF
    # All
    DIRS=("$(find "$CX_SHIMS_DIR"/* -maxdepth 1 -type d -exec basename {} \; | grep -v "$(basename "$CX_COMMON_DIR")" | sort)")
    # Enabled
    # errors if empty when using /*
    LINKS=("$(find "$CX_BIN_DIR" -maxdepth 1 -type l -exec basename {} \; | sort)")
    # Disabled = All - Enabled
    DIFF=("$(comm <(echo "${LINKS[@]}") <(echo "${DIRS[@]}") -3 | tr -d '[:blank:]')")

    case "${1:-}" in
        enabled) echo "${LINKS[@]}" ;;
        disabled) echo "${DIFF[@]}" | grep -vE '^$' ;;
        *) echo "${DIRS[@]}" ;;
    esac
}

get_configs() {
    local PROG CONFIGS
    PROG="$1"
    CONFIGS=("$(find "$CX_SHIMS_DIR/${PROG}" -maxdepth 1 -type f -exec basename {} \; \
        | grep -vE "($CX_BIN_LINK|$CX_COMMON_DIR)")")
    echo "${CONFIGS[@]}"
}

post_cx() {
    if [ "$CX_TMUX_REFRESH" = "true" ]; then
        [ ! -z "${TMUX:-}" ] && tmux refresh-client
    fi
}

switch_config() {
    local PROG CONFIG
    PROG="${1:-}"
    CONFIG="${2:-}"

    [ ! -e "${CX_SHIMS_DIR}/${PROG}/${CX_BIN_LINK}" ] \
        && msg_error "program ${GREY}$PROG${RED} does not exist - $(_msg_try_one program)"

    [ -z "$CONFIG" ] && \
        msg_error "please provide a config to switch to - $(_msg_try_one config "$PROG")"

    cd "${CX_SHIMS_DIR}/$PROG"

    if [ "$CONFIG" = "clear" ]; then
        rm -f config
        msg_warn "config for $PROG cleared"
        exit 0
    fi

    [ ! -e "$CONFIG" ] && \
        msg_error "config: $CONFIG does not exist - $(_msg_try_one config "$PROG")"

    [ "$(get_current_config "$PROG")" = "$CONFIG" ] \
        && msg_info "$PROG context already set to $CONFIG!" && \
        exit

    # delete current config and recreate symlink
    if [ -h config ]; then
        rm -f config || msg_error "Failed to remove config for $PROG (before applying new config)"
    fi
    ln -snf "$CONFIG" config
    msg_info "$PROG context: $CONFIG"
    post_cx
}


### MAIN ###


[ "$#" = 0 ] && { echo "$USAGE"; exit 0; }
initialise_settings
validate_settings

case "${1:-}" in
    enable) 
        if [ ! -z "${2:-}" ]; then
            bin_link "$2" create; exit 0
        else
            all_shims create; exit 0
        fi
        ;;
    disable) 
        if [ ! -z "${2:-}" ]; then
            bin_link "$2" delete; exit 0
        else
            all_shims delete; exit 0
        fi
        ;;
    get) get_current_config "${2:-}"; exit 0; ;;
    config) get_settings "${2:-}"; exit 0; ;;
    init) initialise_cx_home; exit 0; ;;
    list) 
        if [[ "${2:-}" == "enabled" || "${2:-}" == "disabled" || "${2:-}" == "" ]]; then
            get_shims "${2:-}"; exit 0
        else
            get_configs "${2:-}"; exit 0
        fi
        ;;
    -h) 
        echo "$USAGE"
        exit 0
        ;;
    --help)
        echo "$USAGE"; echo
        echo "$MOREINFO"
        exit 0
        ;;
    --autocomplete)
        setup_autocomplete
        ;;
    --functions)
        export_functions
        ;;
    --init)
        export_settings
        export_functions
        ;;
esac

switch_config "${1:-}" "${2:-}"

### END OF MAIN ###
